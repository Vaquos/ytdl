"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YouTubeAudio = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const ytdl_core_1 = __importDefault(require("ytdl-core"));
const fluent_ffmpeg_1 = __importDefault(require("fluent-ffmpeg"));
const search_1 = require("./search");
class YouTubeAudio extends search_1.YouTubeSearch {
    audioCodec;
    audioChannels;
    audioBitrate;
    fname;
    ext;
    dir;
    constructor(url) {
        super(url);
    }
    codec(audioCodec) {
        this.audioCodec = audioCodec;
        return this;
    }
    bitrate(audioBitrate) {
        this.audioBitrate = audioBitrate;
        return this;
    }
    channels(audioChannels) {
        this.audioChannels = audioChannels;
        return this;
    }
    outdir(dir) {
        dir = dir.endsWith("/") ? dir : dir + "/";
        if (!node_fs_1.default.existsSync(dir))
            node_fs_1.default.mkdirSync(dir);
        this.dir = dir;
        return this;
    }
    extension(ext) {
        this.ext = ext;
        return this;
    }
    filename(fname) {
        this.fname = fname;
        return this;
    }
    download() {
        return new Promise(async (resolve, reject) => {
            try {
                const metadata = await this.getSpecificVideo();
                const stream = (0, ytdl_core_1.default)(metadata.url, { filter: "audioonly", quality: 140 });
                const audioPath = this.dir +
                    (this.fname ||
                        (metadata.title.match(/\//g) && metadata.title.replace(/\//g, "_")) ||
                        metadata.title) +
                    this.ext;
                (0, fluent_ffmpeg_1.default)(stream)
                    .audioCodec(this.audioCodec)
                    .audioBitrate(this.audioBitrate)
                    .audioChannels(this.audioChannels)
                    .save(audioPath)
                    .on("error", (e) => reject(e))
                    .on("end", () => {
                    resolve({
                        ...metadata,
                        audioPath,
                    });
                });
            }
            catch (e) {
                reject(e);
            }
        });
    }
}
exports.YouTubeAudio = YouTubeAudio;
